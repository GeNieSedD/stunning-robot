<template>
  <div id="app">
    <navigation />
    <main>
      <!-- –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ -->
      <div class="heading-question">
        <h2 class="healding-max">–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</h2>
        <span id="popUp-hint" class="healding-3">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É</span>
      </div>
      <form class="constructor-test" @submit.prevent="question">
        <!-- –í–æ–ø—Ä–æ—Å 1 -->
        <div
          v-for="(question, index) in questions"
          :key="index"
          class="question"
        >
          <div class="heading">
            <h1 class="healding-max">–í–æ–ø—Ä–æ—Å</h1>
            <h1 class="healding-max">{{ index + 1 }}</h1>
          </div>
          <div class="content-question">
            <div class="description">
              <div class="input-label">
                <label class="healding-2-bold"
                  >–û–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ <span id="required">*</span></label
                >
                <input
                  class="input-default texting-3"
                  type="text"
                  v-model="question.description"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                  required
                />
              </div>
              <a href="" class="texting-1-bold">+ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</a>
            </div>
            <div class="constructor-answers">
              <div class="answers">
                <div
                  v-for="(answer, answerIndex) in question.answers"
                  :key="answerIndex"
                  class="input-label"
                >
                  <div class="radio-label">
                    <input
                      type="radio"
                      :name="'question' + index"
                      :id="'answer' + index + answerIndex"
                      v-model="questions.selectAnswer"
                      :value="answer"
                    />
                    <label
                      for="'answer' + index + answerIndex"
                      class="texting-2"
                      >–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞</label
                    >
                    <span>{{ answerIndex + 1 }}</span>
                  </div>
                  <input
                    class="input-default texting-3"
                    type="text"
                    v-model="answers"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"
                    required
                  />
                </div>
              </div>

              <a
                href=""
                class="texting-1-bold"
                @click.prevent="addAnswer(index)"
                >+ –î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞</a
              >
            </div>
          </div>
        </div>
        <button
          class="button button-primary healding-3"
          type="button"
          @click="addQuestion"
        >
          –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
        </button>
      </form>
    </main>
    <footer>
      <div class="setting-test">
        <h2 class="healding-1">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∞</h2>
        <div class="inputs">
          <div class="input-label">
            <label for="" class="texting-1">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∞</label>
            <input type="date" class="input-default" />
          </div>
          <div class="input-label">
            <label for="" class="texting-1">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ—Å—Ç–∞</label>
            <input type="date" class="input-default texting-3" />
          </div>
          <div class="input-label">
            <label for="" class="texting-1">–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è</label>
            <input type="time" class="input-default texting-3" />
          </div>
          <div class="input-label">
            <label for="" class="texting-1">–í—ã–±–æ—Ä –≥—Ä—É–ø–ø</label>
            <select name="" id="" class="dropdown texting-3" v-model="fetchGroupTitle">
              <option v-for="group in groupTitles" :key="group" :value="group.id">{{ group}}</option>
            </select>
          </div>
        </div>
      </div>
      <div class="information-test">
        <h2 class="healding-1">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–µ</h2>
        <div class="update-test">
          <div class="input-label">
            <label for="" class="texting-1">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
            <input
              type="text"
              class="input-default texting-3"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–∞"
            />
          </div>
          <div class="input-label" id="description">
            <label for="" class="texting-1">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</label>
            <textarea               
              class="input input-default texting-3"
              placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ">
            </textarea>
          </div>
          <div class="input-label">
            <label for="" class="texting-1">–û–±–ª–æ–∂–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</label>
            <input type="fil"/>
          </div>
        </div>
        <button class="button button-primary healding-3">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç</button>
      </div>
  </footer>
  </div>
</template>
<script setup>
import navigation from "../module/navigation.vue"
import { ref, onMounted } from 'vue'
import http from '../http-common'

// üß† –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const groupTitles = ref([])
const errorMessage = ref('')
const user = ref(null)


// üì° –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø
const fetchGroupTitle = async () => {
  try {
    const res = await http.get(`/groups/${user.value.id}`)
    console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ', res.data)
    groupTitles.value = res.data.groupTitles
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: ', error)
    errorMessage.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã'
  }
}

// üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
onMounted(() => {
  const storedUser = JSON.parse(localStorage.getItem('user'))
  if (storedUser) {
    user.value = storedUser
    fetchGroupTitle()
  } else {
    errorMessage.value = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
    console.warn('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
  }
})

// üéì –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
const title = ref('')
const description = ref('')
const img = ref('')
const beginningDate = ref('')
const endDate = ref('')
const time = ref('')
const selectGroup = ref([])

const questions = ref([
  {
    description: '',
    answers: ['', '', ''],
    selectAnswer: null,
  },
])

const addQuestion = () => {
  questions.value.push({
    description: '',
    answers: ['', '', ''],
    selectAnswer: null,
  })
}

const addAnswer = (questionIndex) => {
  questions.value[questionIndex].answers.push('')
}

const question = () => {
  console.log(questions.value)
};
</script>
<style scoped>
@import "../css/components/block/buttons/button.css";
@import "../css/components/block/inputs/input.css";
@import "../css/components/variables/text-style.css";
@import "../css/components/variables/variables.css";
@import "../css/pages/create-test.css"; 
</style>
